name: Deploy to EC2

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed  # Only triggers when a PR is merged into main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Backend Tests (Jest)
      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Run backend tests (Jest)
        run: |
          cd backend
          npm test

      # Frontend Tests (Cypress)
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests (Cypress)
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend  # Tell Cypress to use the frontend directory
          start: npm start
          wait-on: http://localhost:3000
          browser: chrome # or firefox

      # Only Deploy if Tests Pass
      - name: Setup SSH Connection
        if: success()
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to EC2
        if: success()
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            cd ~/AI4Devs-pipeline

            echo "Pulling latest changes..."
            git pull origin main

            echo "Checking for backend dependency changes..."
            cd backend
            if [ -f package-lock.json ]; then
              if ! cmp -s package-lock.json package-lock.json.bak; then
                echo "Dependencies changed, running npm install..."
                npm install
                cp package-lock.json package-lock.json.bak
              else
                echo "No backend dependency changes."
              fi
            fi
            cd ..

            echo "Checking for frontend changes..."
            cd frontend
            if [ -d build ]; then
              echo "Skipping frontend build (already exists)."
            else
              echo "Building frontend..."
              npm install
              npm run build
            fi
            cd ..

            echo "Restarting backend only if necessary..."
            cd backend
            if pm2 list | grep -q backend; then
              echo "Restarting backend..."
              pm2 restart backend
            else
              echo "Starting backend..."
              pm2 start npm --name "backend" -- run start
            fi
            cd ..

            echo "Deployment successful!"
          EOF