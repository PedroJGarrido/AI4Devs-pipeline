name: Backend CI/CD

on:
  push:
    branches:
      - pipeline-JLSO
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - pipeline-JLSO
    paths:
      - 'backend/**'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Tests
        run: npm test
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build Application
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            backend/dist
            backend/package.json
            backend/package-lock.json
            backend/prisma

  deploy:
    needs: test-and-build
    if: github.ref == 'refs/heads/pipeline-JLSO' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_INSTANCE }}
          USER: ubuntu
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Crear directorio de la aplicación si no existe
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} '
            mkdir -p ~/app/backend
          '

          # Copiar archivos al servidor
          scp -o StrictHostKeyChecking=no -i private_key.pem -r backend/* ${USER}@${HOST}:~/app/backend/

          # Instalar dependencias y reiniciar la aplicación
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} '
            cd ~/app/backend
            npm ci --production
            npx prisma generate
            pm2 delete backend || true
            pm2 start dist/index.js --name backend
          '

          rm -f private_key.pem
